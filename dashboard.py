"""
VNStock Dashboard - Tr·ª±c quan h√≥a d·ªØ li·ªáu c·ªï phi·∫øu
S·ª≠ d·ª•ng Streamlit v√† Plotly ƒë·ªÉ t·∫°o giao di·ªán web t∆∞∆°ng t√°c
"""

import streamlit as st
import plotly.graph_objects as go
import pandas as pd
from datetime import datetime, timedelta
from vnstock import Vnstock
import logging

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="VNStock Dashboard",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS t√πy ch·ªânh
st.markdown("""
    <style>
    .main {
        padding: 2rem;
    }
    .stTitle {
        color: #1f77b4;
        font-size: 3rem !important;
        font-weight: bold;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    </style>
""", unsafe_allow_html=True)

def format_currency(value):
    """Format s·ªë ti·ªÅn theo ƒë·ªãnh d·∫°ng VND"""
    try:
        if pd.isna(value):
            return "N/A"
        # Chuy·ªÉn t·ª´ ngh√¨n ƒë·ªìng sang VND ƒë·∫ßy ƒë·ªß
        vnd_value = value * 1000
        return f"{vnd_value:,.0f} VND"
    except:
        return "N/A"

def format_volume(value):
    """Format kh·ªëi l∆∞·ª£ng giao d·ªãch"""
    try:
        if pd.isna(value):
            return "N/A"
        if value >= 1_000_000:
            return f"{value/1_000_000:.2f}M"
        elif value >= 1_000:
            return f"{value/1_000:.2f}K"
        return f"{value:,.0f}"
    except:
        return "N/A"

def get_stock_data(symbol, days=365):
    """
    L·∫•y d·ªØ li·ªáu c·ªï phi·∫øu t·ª´ vnstock
    
    Args:
        symbol: M√£ c·ªï phi·∫øu
        days: S·ªë ng√†y l·ªãch s·ª≠ (m·∫∑c ƒë·ªãnh 365 - 1 nƒÉm)
    
    Returns:
        DataFrame ch·ª©a d·ªØ li·ªáu OHLCV
    """
    try:
        # Kh·ªüi t·∫°o vnstock client
        stock = Vnstock().stock(symbol=symbol.upper(), source='VCI')
        
        # T√≠nh to√°n kho·∫£ng th·ªùi gian
        end_date = datetime.now().strftime("%Y-%m-%d")
        start_date = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%d")
        
        # L·∫•y d·ªØ li·ªáu l·ªãch s·ª≠
        logger.info(f"ƒêang l·∫•y d·ªØ li·ªáu {symbol} t·ª´ {start_date} ƒë·∫øn {end_date}")
        df = stock.quote.history(start=start_date, end=end_date)
        
        if df.empty:
            st.error(f"Kh√¥ng c√≥ d·ªØ li·ªáu cho m√£ {symbol}")
            return None
        
        # Chuy·ªÉn ƒë·ªïi c·ªôt time th√†nh datetime n·∫øu ch∆∞a
        if 'time' in df.columns:
            df['time'] = pd.to_datetime(df['time'])
        
        logger.info(f"ƒê√£ l·∫•y ƒë∆∞·ª£c {len(df)} b·∫£n ghi d·ªØ li·ªáu")
        return df
        
    except Exception as e:
        logger.error(f"L·ªói khi l·∫•y d·ªØ li·ªáu {symbol}: {str(e)}")
        st.error(f"L·ªói: {str(e)}")
        return None

def plot_candlestick(df, symbol):
    """
    V·∫Ω bi·ªÉu ƒë·ªì n·∫øn b·∫±ng Plotly
    
    Args:
        df: DataFrame ch·ª©a d·ªØ li·ªáu OHLCV
        symbol: M√£ c·ªï phi·∫øu
    
    Returns:
        Plotly figure object
    """
    try:
        # T·∫°o bi·ªÉu ƒë·ªì n·∫øn
        fig = go.Figure(data=[go.Candlestick(
            x=df['time'],
            open=df['open'] * 1000,  # Chuy·ªÉn t·ª´ ngh√¨n ƒë·ªìng sang VND
            high=df['high'] * 1000,
            low=df['low'] * 1000,
            close=df['close'] * 1000,
            name=symbol,
            increasing=dict(
                line=dict(color='#26a69a', width=1),
                fillcolor='#26a69a'
            ),
            decreasing=dict(
                line=dict(color='#ef5350', width=1),
                fillcolor='#ef5350'
            )
        )])
        
        # C·∫≠p nh·∫≠t layout
        fig.update_layout(
            title=f'Bi·ªÉu ƒë·ªì N·∫øn - {symbol.upper()}',
            title_font=dict(size=24, color='#1f77b4', family='Arial Black'),
            xaxis_title='Th·ªùi gian',
            yaxis_title='Gi√° (VND)',
            xaxis_rangeslider_visible=False,
            template='plotly_white',
            height=600,
            hovermode='x unified',
            xaxis=dict(
                showgrid=True,
                gridwidth=1,
                gridcolor='#e0e0e0'
            ),
            yaxis=dict(
                showgrid=True,
                gridwidth=1,
                gridcolor='#e0e0e0',
                tickformat=',d'
            )
        )
        
        return fig
        
    except Exception as e:
        logger.error(f"L·ªói khi v·∫Ω bi·ªÉu ƒë·ªì: {str(e)}")
        st.error(f"L·ªói khi v·∫Ω bi·ªÉu ƒë·ªì: {str(e)}")
        return None

def plot_volume(df):
    """
    V·∫Ω bi·ªÉu ƒë·ªì kh·ªëi l∆∞·ª£ng giao d·ªãch
    
    Args:
        df: DataFrame ch·ª©a d·ªØ li·ªáu volume
    
    Returns:
        Plotly figure object
    """
    try:
        # T·∫°o m√†u s·∫Øc cho volume (xanh khi tƒÉng, ƒë·ªè khi gi·∫£m)
        colors = ['#26a69a' if close >= open_price else '#ef5350' 
                  for close, open_price in zip(df['close'], df['open'])]
        
        fig = go.Figure(data=[go.Bar(
            x=df['time'],
            y=df['volume'],
            name='Kh·ªëi l∆∞·ª£ng',
            marker_color=colors,
            opacity=0.7
        )])
        
        fig.update_layout(
            title='Kh·ªëi l∆∞·ª£ng giao d·ªãch',
            title_font=dict(size=18, color='#1f77b4'),
            xaxis_title='Th·ªùi gian',
            yaxis_title='Kh·ªëi l∆∞·ª£ng',
            template='plotly_white',
            height=300,
            showlegend=False,
            xaxis=dict(
                showgrid=True,
                gridwidth=1,
                gridcolor='#e0e0e0'
            ),
            yaxis=dict(
                showgrid=True,
                gridwidth=1,
                gridcolor='#e0e0e0',
                tickformat=',d'
            )
        )
        
        return fig
        
    except Exception as e:
        logger.error(f"L·ªói khi v·∫Ω bi·ªÉu ƒë·ªì volume: {str(e)}")
        return None

def calculate_statistics(df):
    """
    T√≠nh to√°n c√°c ch·ªâ s·ªë th·ªëng k√™
    
    Args:
        df: DataFrame ch·ª©a d·ªØ li·ªáu
    
    Returns:
        Dictionary ch·ª©a c√°c ch·ªâ s·ªë
    """
    try:
        stats = {
            'current_price': df['close'].iloc[-1] * 1000,
            'open_price': df['open'].iloc[-1] * 1000,
            'high_price': df['high'].max() * 1000,
            'low_price': df['low'].min() * 1000,
            'avg_volume': df['volume'].mean(),
            'total_volume': df['volume'].sum(),
            'price_change': (df['close'].iloc[-1] - df['close'].iloc[0]) * 1000,
            'price_change_percent': ((df['close'].iloc[-1] - df['close'].iloc[0]) / df['close'].iloc[0] * 100),
            'volatility': df['close'].std() * 1000
        }
        return stats
    except Exception as e:
        logger.error(f"L·ªói khi t√≠nh to√°n th·ªëng k√™: {str(e)}")
        return None

def main():
    """H√†m ch√≠nh c·ªßa dashboard"""
    
    # Header
    st.title("üìä VNStock Dashboard")
    st.markdown("---")
    
    # Sidebar
    with st.sidebar:
        st.header("‚öôÔ∏è C√†i ƒë·∫∑t")
        
        # Input m√£ c·ªï phi·∫øu
        symbol = st.text_input(
            "Nh·∫≠p m√£ c·ªï phi·∫øu:",
            value="ACB",
            help="V√≠ d·ª•: VIC, VNM, FPT, TCB, ACB"
        ).upper()
        
        # Ch·ªçn kho·∫£ng th·ªùi gian
        time_period = st.selectbox(
            "Kho·∫£ng th·ªùi gian:",
            options=[30, 90, 180, 365, 730, 1095],
            index=3,
            format_func=lambda x: f"{x} ng√†y ({x//365} nƒÉm)" if x >= 365 else f"{x} ng√†y"
        )
        
        # N√∫t t·∫£i d·ªØ li·ªáu
        load_data = st.button("üîÑ T·∫£i d·ªØ li·ªáu", type="primary", use_container_width=True)
        
        st.markdown("---")
        
        # Th√¥ng tin
        st.markdown("""
        ### üìñ H∆∞·ªõng d·∫´n
        1. Nh·∫≠p m√£ c·ªï phi·∫øu (VD: ACB, VIC)
        2. Ch·ªçn kho·∫£ng th·ªùi gian
        3. Nh·∫•n "T·∫£i d·ªØ li·ªáu"
        
        ### ‚ÑπÔ∏è Th√¥ng tin
        - **Ngu·ªìn**: vnstock
        - **ƒê∆°n v·ªã ti·ªÅn t·ªá**: VND
        - **C·∫≠p nh·∫≠t**: Real-time
        """)
    
    # Main content
    if load_data or symbol:
        with st.spinner(f"‚è≥ ƒêang t·∫£i d·ªØ li·ªáu {symbol}..."):
            df = get_stock_data(symbol, days=time_period)
        
        if df is not None and not df.empty:
            # T√≠nh to√°n th·ªëng k√™
            stats = calculate_statistics(df)
            
            if stats:
                # Hi·ªÉn th·ªã metrics
                st.subheader(f"üìà Th√¥ng tin {symbol}")
                
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric(
                        label="Gi√° hi·ªán t·∫°i",
                        value=f"{stats['current_price']:,.0f} VND",
                        delta=f"{stats['price_change']:,.0f} VND ({stats['price_change_percent']:.2f}%)"
                    )
                
                with col2:
                    st.metric(
                        label="Gi√° cao nh·∫•t",
                        value=f"{stats['high_price']:,.0f} VND"
                    )
                
                with col3:
                    st.metric(
                        label="Gi√° th·∫•p nh·∫•t",
                        value=f"{stats['low_price']:,.0f} VND"
                    )
                
                with col4:
                    st.metric(
                        label="Kh·ªëi l∆∞·ª£ng TB",
                        value=format_volume(stats['avg_volume'])
                    )
                
                st.markdown("---")
                
                # Bi·ªÉu ƒë·ªì n·∫øn
                st.subheader("üïØÔ∏è Bi·ªÉu ƒë·ªì n·∫øn")
                candlestick_fig = plot_candlestick(df, symbol)
                if candlestick_fig:
                    st.plotly_chart(candlestick_fig, use_container_width=True)
                
                # Bi·ªÉu ƒë·ªì kh·ªëi l∆∞·ª£ng
                st.subheader("üìä Kh·ªëi l∆∞·ª£ng giao d·ªãch")
                volume_fig = plot_volume(df)
                if volume_fig:
                    st.plotly_chart(volume_fig, use_container_width=True)
                
                st.markdown("---")
                
                # B·∫£ng d·ªØ li·ªáu
                with st.expander("üìã Xem d·ªØ li·ªáu chi ti·∫øt"):
                    # Format d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã
                    display_df = df.copy()
                    display_df['open'] = display_df['open'] * 1000
                    display_df['high'] = display_df['high'] * 1000
                    display_df['low'] = display_df['low'] * 1000
                    display_df['close'] = display_df['close'] * 1000
                    
                    st.dataframe(
                        display_df[['time', 'open', 'high', 'low', 'close', 'volume']].tail(50),
                        use_container_width=True,
                        hide_index=True
                    )
                
                # Th·ªëng k√™ chi ti·∫øt
                with st.expander("üìä Th·ªëng k√™ chi ti·∫øt"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.markdown(f"""
                        **Th√¥ng tin gi√°:**
                        - Gi√° m·ªü c·ª≠a: {stats['open_price']:,.0f} VND
                        - Gi√° ƒë√≥ng c·ª≠a: {stats['current_price']:,.0f} VND
                        - Bi·∫øn ƒë·ªông: ¬±{stats['volatility']:,.0f} VND
                        """)
                    
                    with col2:
                        st.markdown(f"""
                        **Th√¥ng tin kh·ªëi l∆∞·ª£ng:**
                        - T·ªïng KL: {format_volume(stats['total_volume'])}
                        - KL trung b√¨nh: {format_volume(stats['avg_volume'])}
                        - S·ªë phi√™n: {len(df)} ng√†y
                        """)
        else:
            st.warning(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho m√£ {symbol}")
    else:
        # Hi·ªÉn th·ªã th√¥ng tin ch√†o m·ª´ng
        st.info("üëà Vui l√≤ng nh·∫≠p m√£ c·ªï phi·∫øu v√† nh·∫•n 'T·∫£i d·ªØ li·ªáu' ƒë·ªÉ b·∫Øt ƒë·∫ßu")
        
        # Hi·ªÉn th·ªã m·ªôt s·ªë m√£ ph·ªï bi·∫øn
        st.subheader("üî• M√£ c·ªï phi·∫øu ph·ªï bi·∫øn")
        
        popular_stocks = {
            "Ng√¢n h√†ng": ["ACB", "TCB", "VCB", "MBB", "VPB"],
            "B·∫•t ƒë·ªông s·∫£n": ["VHM", "VIC", "NVL", "KDH", "DXG"],
            "C√¥ng ngh·ªá": ["FPT", "CMG", "VGI"],
            "H√†ng ti√™u d√πng": ["VNM", "MSN", "MWG", "PNJ"]
        }
        
        for sector, stocks in popular_stocks.items():
            with st.expander(f"üìå {sector}"):
                st.write(", ".join(stocks))

if __name__ == "__main__":
    main()

