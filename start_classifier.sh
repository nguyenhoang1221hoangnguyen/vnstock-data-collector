#!/bin/bash
# Quick start script for Stock Classifier

cd "/Users/nguyenhoang/Desktop/2025/hoc-tap code/vscode/VNSTOCK 2"

echo "üéØ STOCK CLASSIFICATION SYSTEM"
echo "=============================="
echo ""
echo "Ch·ªçn ch·ª©c nƒÉng:"
echo "1. Scan 20 stocks (nhanh - 2 ph√∫t)"
echo "2. Scan 50 stocks (v·ª´a - 5 ph√∫t)"
echo "3. Scan 100 stocks (ƒë·∫ßy ƒë·ªß - 10 ph√∫t)"
echo "4. Quick test (5 stocks)"
echo "5. Classify 1 m√£ c·ª• th·ªÉ"
echo ""
read -p "Nh·∫≠p l·ª±a ch·ªçn (1-5): " choice

# Activate virtual environment
source venv/bin/activate

case $choice in
    1)
        echo ""
        echo "üîç Scanning 20 stocks from HOSE..."
        python stock_classifier.py 20
        ;;
    2)
        echo ""
        echo "üîç Scanning 50 stocks from HOSE..."
        python stock_classifier.py 50
        ;;
    3)
        echo ""
        echo "üîç Scanning 100 stocks from HOSE..."
        python stock_classifier.py 100
        ;;
    4)
        echo ""
        echo "üß™ Running quick test (5 stocks)..."
        python test_classifier_quick.py
        ;;
    5)
        echo ""
        read -p "Nh·∫≠p m√£ c·ªï phi·∫øu (VD: FPT): " symbol
        echo ""
        echo "üîç Classifying $symbol..."
        python -c "
from stock_classifier import StockClassifier
import json

classifier = StockClassifier()
result = classifier.classify_stock('$symbol')

if 'error' not in result or result['error'] is None:
    print('\n' + '='*60)
    print(f\"üìä CLASSIFICATION RESULT: {result['symbol']}\")
    print('='*60)
    
    print(f\"\n‚≠ê Overall Rating: {result['overall_rating']['rating']} ({result['overall_rating']['score']})\")
    print(f\"   {result['overall_rating']['recommendation']}\")
    
    print(f\"\nüìà Growth: {result['classifications']['growth']['category']} (Score: {result['classifications']['growth']['score']})\")
    print(f\"   {result['classifications']['growth']['description']}\")
    
    print(f\"\n‚ö†Ô∏è  Risk: {result['classifications']['risk']['category']} (Score: {result['classifications']['risk']['risk_score']})\")
    print(f\"   {result['classifications']['risk']['description']}\")
    print(f\"   Volatility: {result['classifications']['risk']['volatility']}%\")
    
    print(f\"\nüí∞ Market Cap: {result['classifications']['market_cap']['category']}\")
    print(f\"   {result['classifications']['market_cap']['description']}\")
    print(f\"   Value: {result['classifications']['market_cap']['market_cap_trillion']} trillion VND\")
    
    print(f\"\nüìä Momentum: {result['classifications']['momentum']['category']} (Score: {result['classifications']['momentum']['momentum_score']})\")
    print(f\"   {result['classifications']['momentum']['description']}\")
    
    print(f\"\nüî¢ Component Scores:\")
    print(f\"   Growth: {result['overall_rating']['component_scores']['growth']}\")
    print(f\"   Risk Adjusted: {result['overall_rating']['component_scores']['risk_adjusted']}\")
    print(f\"   Momentum: {result['overall_rating']['component_scores']['momentum']}\")
    
    print('\n' + '='*60)
else:
    print(f\"‚ùå Error: {result['error']}\")
"
        ;;
    *)
        echo "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!"
        exit 1
        ;;
esac

echo ""
echo "‚úÖ Ho√†n t·∫•t!"

